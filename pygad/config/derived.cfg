[general]
# whether to cache derived blocks
cache_derived   = True
# blocks with very time-consuming calculations can always be cached
# Unix shell-style wildcards are understood
always_cache    = age, temp, mag*, Ekin, angmom, jcirc, LX

[iontable]
tabledir        = %(PYGAD_DIR)s/iontbls/tbls-i45

# new style parameters
style           = Oppenheimer new
pattern         = lt<z>f100_i45
# self-shielding now is intrinsic to the ionisation tables
selfshield      = False
flux_factor     = 1.0

# old style parameters
#style           = Oppenheimer old
#pattern         = lt<z>f10
#selfshield      = True
#flux_factor     = 1.0
#ions            = H I, He I, He II, C II, C III, C IV, N I, N II, N V,
#                    O I, O II, O III, O IV, O V, O VI,
#                    Mg II, Mg III, Si II, Si III, Si IV, P IV,
#                    S I, S II, S III, S IV, S V, S VI
#nH_vals         = -8  , 0.05, 200
#T_vals          =  2.5, 0.05, 150

[rules]
# Definition of derived blocks. The rules have to be interpretable by Snap.get,
# with the additional use of the aliases defined in the corresponding section.

# the individual elements are automatically registered as derived arrays
elements    = Z                             ; element masses
metallicity = metals/elements.sum(axis=1)   ; metallicity
metals      = elements.sum(axis=1) - (H+He) ; metal mass
alpha_el    = O+C+Ne+Si+Mg+S+Ca             ; alpha element mass
#HI          = calc_HI_mass(gas)             ; the HI mass (UVB as in `gadget.cfg`)
#HII         = H - HI                        ; the (remaining) HII mass
#H2          = HI * clip(array(P/UnitScalar('5.93e-13 Pa'))**0.92, 0., 1.)
nH          = (H/mass*rho/m_H).in_units_of('cm**-3',subs=gas)

# this can be used to overwrite the volume definition in `gadget.cfg` (by
# `vol_def_x`)
dV          = mass / rho

# sub-arrays
x           = pos[:,0]
y           = pos[:,1]
z           = pos[:,2]
vx          = vel[:,0]
vy          = vel[:,1]
vz          = vel[:,2]

# dist(a[,b]) is much faster than sqrt(sum((a[-b])**2, axis=1))
age         = age_from_form(form_time, self)            ; ages (from formation time)
# pressure
P           = (3/2. * rho * u).in_units_of('Pa',subs=gas)   ; the gas pressure
#n           = ( rho/mass * ( H/m_H + He/m_He \
#                + O/(15.999*m_u) + C/(12.011*m_u) \
#                + Ne/(20.180*m_u) + Fe/(55.845*m_u) \
#                + N/(14.007*m_u) ) ).in_units_of('cm**-3',subs=gas)
# temperatures
#temp        = calc_temps(u, XH=0.76, ne=ne, subs=self)
temp        = calc_temps(u, XH=H/mass, ne=ne, subs=self)
#temp        = calc_temps(u, XH=H/mass, ne=ne, \
#                         XZ=[(O/mass,15.999), (C/mass,12.011), (Ne/mass,20.180), \
#                             (Fe/mass,55.845), (N/mass,14.007), \
#                             (Si/mass,28.085), (Mg/mass,24.305), (S/mass,32.06), \
#                             (Ca/mass,12.011)], \
#                         subs=self)
r           = dist(pos)                     ; spherical radius
rcyl        = dist(pos[:,:2])               ; cylindrical radius
vrad        = inner1d(pos,vel) / r          ; radial velocities
momentum    = (mass * vel.T).T              ; momentum
angmom      = UnitQty(cross(pos,momentum),pos.units*momentum.units)     ; angular momentum
Ekin        = 0.5*mass*sum(vel**2,axis=1)   ; kinetic energy
# TODO: check if the zero point of the potential is what I expect
Epot        = mass*pot                      ; (Newtonian) potential energy
E           = Ekin+Epot                     ; (Newtonian) total energy

# the angular momentum a particle on a circular orbit with the same energy would have
jcirc       = r * sqrt(2.0*mass*Ekin)
# the parameter jz/jc, where jz is the z-component of the angular momentum and jc=jcirc:
jzjc        = angmom[:,2] / jcirc
vcirc       = sqrt(sum(vel**2,axis=-1) - vrad**2)   ; circular part of the velocities

# luminosities (corresponding magnitudes get derived automatically
# ('lum_x' becomes 'mag_x')):
lum         = get_luminosities(stars)
lum_u       = get_luminosities(stars, band='U')
lum_b       = get_luminosities(stars, band='B')
lum_v       = get_luminosities(stars, band='V')
lum_r       = get_luminosities(stars, band='R')
lum_k       = get_luminosities(stars, band='K')

#idx         = argsort( r )
#Menc        = cumsum( mass[idx] )[argsort(idx)]
#vesc        = sqrt( 2. * Menc * G / r ).in_units_of('km/s')

# X-ray luminosities; only for given redshift; path likely needs to be adjusted...
LX          = calc_x_ray_lum(gas, \
                             lumtable=module_dir+'/../snaps/em.dat', \
                             Zref=0.4, z_table=0.001)

# derived from tracing files:
insitu      = rR200form < 0.1

# cooling (z=0 only)
#Lambda      = calc_cooling_rates(gas, tbl='CoolingTables/z_0.000.hdf5')
#t_cool      = ( UnitArr('3.3 Gyr') * (temp/'1e6 K') / \
#                (n/'1e-3 cm**-3' * Lambda/'1e-23 erg cm**3 s**-1') \
#              ).in_units_of('Gyr',subs=gas)

